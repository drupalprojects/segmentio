<?php

/**
 * @file
 * Drupal Module: segmentio
 *
 * segmentio is the easiest way to integrate analytics into your Drupal site.
 * By installing segmentio's Drupal plugin you can add any analytics service
 * to your site without touching any code.
 */

/**
 * Define default JS.
 */

define('SEGMENTIO_CDN_JS', 'window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","debug","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t,e){var n=document.createElement("script");n.type="text/javascript";n.async=!0;n.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var o=document.getElementsByTagName("script")[0];o.parentNode.insertBefore(n,o);analytics._loadOptions=e};analytics.SNIPPET_VERSION="4.1.0";analytics.load("@write_key");!code!window.analytics.page();}');

/**
 * Implements hook_permission().
 */
function segmentio_permission() {
  return array(
    'administer segmentio' => array(
      'title' => t('Administer segmentio'),
      'description' => t('Perform maintenance tasks for segmentio.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function segmentio_menu() {
  $items['admin/config/system/segmentio'] = array(
    'title' => 'Segmentio Configuration',
    'description' => 'Configure <a href="https://segment.io/libraries/analytics.js" target="_blank"><b>Segmentio</b></a> tracking behavior for your website.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('segmentio_admin_settings_form'),
    'access arguments' => array('administer segmentio'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inc/segmentio.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_page_alter().
 */
function segmentio_page_alter(&$page) {
  $tracking = TRUE;

  // Disable tracking for visitors who have opted out via DNT header.
  if (variable_get('segmentio_privacy', 1) && !empty($_SERVER['HTTP_DNT'])) {
    $tracking = FALSE;
  }

  // Retrieve blocked roles. We only need the checked role ids.
  $roles = array_values(variable_get('segmentio_roles_block', array()));
  // Filter to remove empty values.
  $blocked_roles = array_filter($roles);

  if (count($blocked_roles)) {
    foreach ($blocked_roles as $rid) {
      //Ensure we do not ensnare anonymous users by mistake.
      if ($rid && user_has_role($rid)) {
        // User has a role, disable tracking.
        $tracking = FALSE;
        // No sense in keeping this going.
        break;
      }
    }
  }

  // Calling all modules implementing hook_segmentio_tracking_alter.
  drupal_alter('segmentio_tracking', $tracking);

  if ($tracking) {
    $write_key = variable_get('segmentio_write_key', '');
    if (empty($write_key)) {
      // Severity is emergency since the segmentio system would be unusable.
      watchdog('segmentio', 'No Write Key has been Configured for segmentio', array(), WATCHDOG_EMERGENCY);
    }
    else {
      // Retrieve all the tracking information.
      $info = array();
      $track = variable_get('segmentio_track', array());
      foreach ($track as $function => $enabled) {
        if ($enabled) {
          list($module, $hook) = explode(':', $function);
          $info[] = module_invoke($module, $hook, $page);
        }
      }

      // Construct the code.
      $code = '';
      foreach ($info as $module_info) {
        foreach ($module_info as $track) {
          $code .= $track;
        }
      }

      // Format the Segment.io code.
      $args = array(
        '@write_key' => $write_key,
        '!code' => $code,
      );
      $script = format_string(SEGMENTIO_CDN_JS, $args);
      // Calling all modules implementing hook_segmentio_script_alter.
      drupal_alter('segmentio_script', $script);
      // By default the script gets inserted in header.
      drupal_add_js($script, array('scope' => 'header', 'type' => 'inline'));
    }
  }
}

/**
 * Implements hook_segmentio_info().
 */
function segmentio_segmentio_info() {
  return array(
    'segmentio:segmentio_user' => t('User'),
    'segmentio:segmentio_node' => t('Node'),
  );
}

/**
 * Segment.io callback; Retrieve Segment code for the logged in user.
 */
function segmentio_segmentio_user($page = array()) {
  $track = array();

  global $user;
  if (isset($user) && isset($user->uid)) {
    $code = 'window.analytics.identify("@uid",!options);';
    $code = format_string($code, array(
      '@uid' => $user->uid,
      '!options' => json_encode(array(
        'name' => isset($user->name) ? $user->name : 'anonymous',
        'email' => isset($user->mail) ? $user->mail : '',
      )),
    ));
    $track[] = $code;
  }
  return $track;
}

/**
 * Retrieve information from certain node views.
 */
function segmentio_segmentio_node($page = array()) {
  // Retrieve the node information.
  $track = array();

  if (arg(0) == 'node') {
    $arg1 = arg(1);
    if (is_numeric($arg1)) {
      $node = node_load($arg1);
      if($node) {
        $code = 'window.analytics.page("@type","@name",!properties);';
        $properties = array(
          'nid' => $node->nid,
          'uid' => $node->uid,
        );
        if (isset($node->name)) {
          $properties['name'] = $node->name;
        }
        $code = format_string($code, array(
          '@type' => $node->type,
          '@name' => $node->title,
          '!properties' => json_encode($properties),
        ));

        $track[] = $code;
      }
    }
  }

  return $track;
}

function segmentio_load_library() {
  static $static_cache = FALSE;

  $file = 'Segment.php';
  if (!isset($static_cache[$file])) {
    $path = libraries_get_path('segmentio');
    $filepath = $path . '/lib/' . $file;

    if (file_exists($filepath)) {
      if (include_once($filepath)) {
        $static_cache[$file] = $filepath;

      }
    }
  }
  Segment::init(variable_get('segmentio_write_key', ''), array("debug" => TRUE));

  return $static_cache[$file];
}
